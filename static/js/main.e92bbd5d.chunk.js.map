{"version":3,"sources":["components/Editor.js","components/Result.js","components/Submit.js","helpers/index.js","helpers/testers.js","components/Question.js","styled/theme.js","styled/GlobalStyle.js","consts/questions.js","components/App.js","index.js"],"names":["Wrapper","styled","div","EditField","Controlled","theme","colors","lightGray","Editor","onChange","value","onBeforeChange","className","options","lineWrapping","lint","mode","lineNumbers","darkGray","fonts","main","Result","content","received","expected","testCase","JSON","stringify","isCorrect","style","color","icon","faCheckCircle","faTimesCircle","StyledButton","button","Submit","onSubmit","id","onClick","getRandomNumbersArr","min","max","range","even","arr","randomArrLength","getRandomNumber","i","randomNumber","push","Math","floor","random","testers","0","test","callback","correct","randomArr","flat","Infinity","every","el","console","log","evenArray","1","2","seconds","secondsLeft","minutes","TaskDescription","Number","span","Question","desc","index","useState","setValue","setCorrect","setTestCase","result","setResult","editor","data","functionStartIndex","match","userArgs","slice","argsArray","length","split","userFunction","Function","err","Provider","children","GlobalStyle","createGlobalStyle","questions","App","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e92bbd5d.chunk.js","sourcesContent":["import \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport { Controlled } from \"react-codemirror2\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Editor = ({ onChange, value }) => {\r\n  return (\r\n    <Wrapper>\r\n      <EditField\r\n        onBeforeChange={onChange}\r\n        value={value}\r\n        className=\"editor-container__wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: \"javascript\",\r\n          lineNumbers: true,\r\n          theme: \"material\",\r\n        }}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  flex-basis: 60%;\r\n`;\r\n\r\nconst EditField = styled(Controlled)`\r\n  border: 2px solid ${({ theme }) => theme.colors.lightGray};\r\n  font-size: 1.35rem;\r\n`;\r\n\r\nexport default Editor;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Result = ({ received, expected, testCase }) => {\r\n  // console.table({ received, expected, testCase });\r\n  let content;\r\n\r\n  if (`${JSON.stringify(expected)}` && `${JSON.stringify(received)}`) {\r\n    content = (\r\n      <>\r\n        <p>Otrzymana wartość to:</p>\r\n        <span>{`${JSON.stringify(received)}`}</span>\r\n        <p>Spodziewany wynik:</p>\r\n        <span>{`${JSON.stringify(expected)}`}</span>\r\n        <p>Wartość użyta w teście:</p>\r\n        <span>{JSON.stringify(testCase)}</span>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const isCorrect = `${received}` === `${expected}`;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h2>\r\n        Wynik{\" \"}\r\n        <FontAwesomeIcon\r\n          style={\r\n            isCorrect\r\n              ? { color: \"rgb(20,200,20)\" }\r\n              : { color: \"rgb(200,20,20)\" }\r\n          }\r\n          icon={isCorrect ? faCheckCircle : faTimesCircle}\r\n        />\r\n      </h2>\r\n      {content}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  flex-basis: 35%;\r\n\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: space-between;\r\n\r\n  border: 2px solid ${({ theme }) => theme.colors.darkGray};\r\n\r\n  text-align: center;\r\n  font-family: ${({ theme }) => theme.fonts.main};\r\n\r\n  background-color: ${({ theme }) => theme.colors.lightGray};\r\n\r\n  padding-bottom: 10px;\r\n\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  h2 {\r\n    background-color: ${({ theme }) => theme.colors.darkGray};\r\n    color: ${({ theme }) => theme.colors.lightGray};\r\n\r\n    padding-bottom: 5px;\r\n  }\r\n\r\n  p {\r\n    background-color: white;\r\n    font-size: 1.25rem;\r\n  }\r\n`;\r\n\r\nexport default Result;\r\n","import styled from \"styled-components\";\r\n\r\nconst Submit = ({ onSubmit, id }) => {\r\n  return (\r\n    <Wrapper>\r\n      <StyledButton onClick={() => onSubmit(id)}>Sprawdź</StyledButton>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  flex-basis: 100%;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  margin-top: 10px;\r\n  width: 100%;\r\n\r\n  border: 2px solid ${({ theme }) => theme.colors.darkGray};\r\n\r\n  font-size: 2rem;\r\n  font-family: ${({ theme }) => theme.fonts.main};\r\n\r\n  background-color: ${({ theme }) => theme.colors.lightGray};\r\n\r\n  cursor: pointer;\r\n  transition: 300ms;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.darkGray};\r\n    color: ${({ theme }) => theme.colors.lightGray};\r\n  }\r\n`;\r\n\r\nexport default Submit;\r\n","/**\r\n * Generates random array\r\n * @param {number} [min = 0] - array min length\r\n * @param {number} [max = 100] - array max length\r\n * @param {number[]} [range = [0, 100]] - [min, max] - range of numbers in the array\r\n * @returns {number[]} - returns array which contains random numbers within the givne range\r\n */\r\nexport const getRandomNumbersArr = (\r\n  min = 0,\r\n  max = 100,\r\n  range = [0, 100],\r\n  even = false\r\n) => {\r\n  const arr = [];\r\n  const randomArrLength = getRandomNumber(min, max);\r\n\r\n  for (let i = 0; i < randomArrLength; i++) {\r\n    let randomNumber = getRandomNumber(range[0], range[1]);\r\n\r\n    if (even && randomNumber % 2 !== 0) {\r\n      while (randomNumber % 2 !== 0) {\r\n        randomNumber = getRandomNumber(range[0], range[1]);\r\n      }\r\n    }\r\n    arr.push(randomNumber);\r\n  }\r\n\r\n  return arr;\r\n};\r\n\r\n/**\r\n * Generates random number within the given range\r\n * @param {number} [min = 0] - minimum number\r\n * @param {number} [max = 1000] - maximum number\r\n * @returns {number} - randomly generated number\r\n */\r\nconst getRandomNumber = (min, max) => {\r\n  return Math.floor(Math.random() * (max + 1 - min) + min);\r\n};\r\n","import { getRandomNumbersArr } from \"../helpers\";\r\n\r\nexport const testers = {\r\n  0: {\r\n    test(callback) {\r\n      const randomArr = [];\r\n      let testCase = randomArr;\r\n      let correct;\r\n\r\n      for (let i = 0; i < Math.floor(Math.random() * 10); i++) {\r\n        randomArr.push(getRandomNumbersArr(1, 5, [0, 100]));\r\n      }\r\n\r\n      let received = callback(randomArr);\r\n\r\n      correct = () => randomArr.flat(Infinity).every((el) => el % 2 === 0);\r\n\r\n      if (correct() == received) {\r\n        console.log(\"parzyste\");\r\n        const evenArray = [];\r\n\r\n        for (let i = 0; i < Math.floor(Math.random() * 10); i++) {\r\n          evenArray.push(getRandomNumbersArr(1, 5, [0, 100], true));\r\n        }\r\n\r\n        received = callback(evenArray);\r\n        correct = () => evenArray.flat(Infinity).every((el) => el % 2 === 0);\r\n        testCase = evenArray;\r\n      }\r\n\r\n      return { correct, received, testCase };\r\n    },\r\n  },\r\n  1: {\r\n    test(callback) {\r\n      const max = Math.floor(Math.random() * 50);\r\n      let min = Math.floor(Math.random() * max - 1);\r\n      if (min < 0) min = 0;\r\n      const received = callback(min, max);\r\n      let correct;\r\n\r\n      correct = () => {\r\n        const arr = [];\r\n\r\n        for (let i = min; i < max + 1; i++) {\r\n          if (i % 2 !== 0) {\r\n            arr.push(i);\r\n          }\r\n        }\r\n\r\n        return arr;\r\n      };\r\n\r\n      return { correct, received, testCase: `${min}, ${max}` };\r\n    },\r\n  },\r\n  2: {\r\n    test(callback) {\r\n      const seconds = Math.floor(Math.random() * 86400);\r\n      const received = callback(seconds);\r\n      let correct;\r\n\r\n      correct = () => {\r\n        const secondsLeft = (seconds % 3600) % 60;\r\n        const minutes = ((seconds % 3600) - ((seconds % 3600) % 60)) / 60;\r\n        const hours =\r\n          (seconds -\r\n            ((seconds % 3600) -\r\n              ((seconds % 3600) % 60) +\r\n              ((seconds % 3600) % 60))) /\r\n          3600;\r\n\r\n        return `godziny: ${hours}, minuty: ${minutes}, sekundy: ${secondsLeft}`;\r\n      };\r\n\r\n      return { correct, received, testCase: seconds };\r\n    },\r\n  },\r\n};\r\n","import styled from \"styled-components\";\r\nimport { useState } from \"react\";\r\n\r\nimport Editor from \"./Editor\";\r\nimport Result from \"./Result\";\r\nimport Submit from \"./Submit\";\r\nimport { testers } from \"../helpers/testers\";\r\n\r\nconst Question = ({ desc, index }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [correct, setCorrect] = useState(null);\r\n  const [testCase, setTestCase] = useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n\r\n  const handleChange = (editor, data, value) => {\r\n    setValue(value);\r\n  };\r\n\r\n  const handleSubmit = (id) => {\r\n    try {\r\n      // index where function body starts\r\n      const functionStartIndex = value.match(/{/).index;\r\n      // arguments extraction\r\n      const userArgs = value\r\n        .slice(0, functionStartIndex)\r\n        .match(/\\([\\S*\\s]{1,}\\)/);\r\n\r\n      const argsArray = userArgs[0].slice(1, userArgs[0].length - 1).split(\",\");\r\n\r\n      // providing arugments and function body\r\n      const userFunction = new Function(\r\n        ...argsArray,\r\n        value.slice(functionStartIndex)\r\n      );\r\n\r\n      const { correct, received, testCase } = testers[id].test(userFunction);\r\n\r\n      setCorrect(correct);\r\n      setResult(received);\r\n      setTestCase(testCase);\r\n    } catch (err) {\r\n      if (`${err}` === \"TypeError: Cannot read property 'index' of null\") {\r\n        setResult(\"Brak deklaracji funkcji, lub błędna deklaracja.\");\r\n      } else if (`${err}` === \"TypeError: Cannot read property '0' of null\") {\r\n        setResult(\"Twoja funkcja musi przyjmować parametry podane w opisie.\");\r\n      } else {\r\n        setResult(`${err}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <TaskDescription>\r\n        <Number>{index + 1}.</Number>\r\n        {desc}\r\n      </TaskDescription>\r\n      <Editor onChange={handleChange} value={value} />\r\n      <Result received={result} expected={correct} testCase={testCase} />\r\n      <Submit onSubmit={handleSubmit} id={index} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 15px auto;\r\n  width: 75%;\r\n\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n\r\n  border-radius: 5px;\r\n\r\n  background-color: rgb(230, 230, 230);\r\n  padding: 15px;\r\n`;\r\n\r\nconst TaskDescription = styled.div`\r\n  margin-bottom: 15px;\r\n  flex-basis: 100%;\r\n  font-family: ${({ theme }) => theme.fonts.main};\r\n`;\r\nconst Number = styled.span`\r\n  float: left;\r\n  margin-right: 10px;\r\n\r\n  font-size: 3rem;\r\n  font-family: ${({ theme }) => theme.fonts.main};\r\n\r\n  color: ${({ theme }) => theme.colors.darkGray};\r\n`;\r\n\r\nexport default Question;\r\n","import { ThemeProvider } from \"styled-components\";\r\n\r\nconst theme = {\r\n  colors: {\r\n    lightGray: \"rgb(225,225,225)\",\r\n    darkGray: \"rgb(38 50 56)\",\r\n  },\r\n  fonts: {\r\n    main: \"'Noto Sans', sans-serif\",\r\n  },\r\n};\r\n\r\nconst Provider = ({ children }) => {\r\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\r\n};\r\n\r\nexport default Provider;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        background-color: gray;\r\n    }\r\n\r\n    button {\r\n        border: none;\r\n        outline:none;\r\n        background: none;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export const questions = [\r\n  {\r\n    desc:\r\n      \"Utwórz funkcję która jako argument przyjmuje tablicę dwupoziomową a następnie sprawdza czy wszystkie elementy w tablicach drugiego poziomu to liczby parzyste. Jeżeli tak zwraca true, jeżeli nie zwraca false. Uwaga! jako argument możemy otrzymać pustą tablicę - wtedy spodziewany wynik to true.\",\r\n  },\r\n  {\r\n    desc:\r\n      \"Utwórz funkcję która przyjmuje dwa argumenty - mała liczba, duża liczba, a następnie zwraca tablicę zawierającą TYLKO liczby z przedziału od małej liczby do dużej liczby (włącznie) które jednocześnie są liczbami nieparzystymi. Np. funkcja(1, 9)da nam wynik [1, 3, 5, 7, 9]\",\r\n  },\r\n  {\r\n    desc:\r\n      \"Utwórz funkcję która przyjmuje jeden argument - liczbę. Podana liczba to sekundy, a funkcja powinna zamienić ją na format godziny: 1, minuty: 12, sekundy: 15. Np funkcja(3730) -> godziny: 1, minuty: 2, sekundy: 10. Podana liczba sekund nigdy nie przekroczy 86 400 (jedna doba).\",\r\n  },\r\n];\r\n","import Question from \"./Question\";\nimport Theme from \"../styled/theme\";\nimport GlobalStyle from \"../styled/GlobalStyle\";\nimport { questions } from \"../consts/questions\";\n\nfunction App() {\n  const renderQuestion = () => {\n    return questions.map(({ desc, correct }, index) => (\n      <Question desc={desc} index={index} key={index} />\n    ));\n  };\n\n  return (\n    <Theme>\n      <GlobalStyle />\n      <div className=\"App\">{renderQuestion()}</div>\n    </Theme>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}